{"errt":{"word":"errt","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err != nil {\n\t\tt.Fatal(err)\n\t}","description":"if err != nil {\n\t\tt.Fatal(err)\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":137,"menu_template":"if err != nil { t.Fatal(err) }","real_name":"errt","action__pattern":"^snippet\\s\\+errt$","menu_abbr":"if err != nil { t.Fatal(err) }"},"lf":{"word":"lf","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"log.Printf(\"${1} = %+v\\n\", $1)${0}","description":"log.Printf(\"${1} = %+v\\n\", $1)${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":223,"menu_template":"log.Printf(...)","real_name":"lf","action__pattern":"^snippet\\s\\+lf$","menu_abbr":"log.Printf(...)"},"def":{"word":"def","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"defer func() {\n\t\t${0}\n\t}()","description":"defer func() {\n\t\t${0}\n\t}()","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":65,"menu_template":"defer func() { ... }","real_name":"def","action__pattern":"^snippet\\s\\+def$","menu_abbr":"defer func() { ... }"},"vars":{"word":"vars","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"var (\n\t\t${1:x} ${2:Type}${3: = ${0:value\\}}\n\t)","description":"var (\n\t\t${1:x} ${2:Type}${3: = ${0:value\\}}\n\t)","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":354,"menu_template":"var ( ... )","real_name":"vars","action__pattern":"^snippet\\s\\+vars$","menu_abbr":"var ( ... )"},"fori":{"word":"fori","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"for ${1:i} := 0; $1 < ${2:N}; $1++ {\n\t\t${0}\n\t}","description":"for ${1:i} := 0; $1 < ${2:N}; $1++ {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":196,"menu_template":"for 0..N-1 { ... }","real_name":"fori","action__pattern":"^snippet\\s\\+fori$","menu_abbr":"for 0..N-1 { ... }"},"ln":{"word":"ln","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"log.Println(\"${1}\")${0}","description":"log.Println(\"${1}\")${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":227,"menu_template":"log.Println(...)","real_name":"ln","action__pattern":"^snippet\\s\\+ln$","menu_abbr":"log.Println(...)"},"tsrv":{"word":"tsrv","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintln(w, ${1:`response`})\n}))\ndefer ts.Close()\n\n//Use testing server url (type string) somewhere\n${0:someUrl} = ts.URL","description":"ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintln(w, ${1:`response`})\n}))\ndefer ts.Close()\n\n//Use testing server url (type string) somewhere\n${0:someUrl} = ts.URL","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":315,"menu_template":"ts := httptest.NewServer(...)","real_name":"tsrv","action__pattern":"^snippet\\s\\+tsrv$","menu_abbr":"ts := httptest.NewServer(...)"},"forr":{"word":"forr","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"for ${2:k}, ${3:v} := range ${1} {\n\t\t${0}\n\t}","description":"for ${2:k}, ${3:v} := range ${1} {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":202,"menu_template":"for k, v := range items { ... }","real_name":"forr","action__pattern":"^snippet\\s\\+forr$","menu_abbr":"for k, v := range items { ... }"},"go":{"word":"go","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"go ${1:funcName}(${0})","description":"go ${1:funcName}(${0})","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":299,"menu_template":"go someFunc(...)","real_name":"go","action__pattern":"^snippet\\s\\+go$","menu_abbr":"go someFunc(...)"},"map":{"word":"map","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"map[${1:string}]${0:int}","description":"map[${1:string}]${0:int}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":235,"menu_template":"map[Type]Type","real_name":"map","action__pattern":"^snippet\\s\\+map$","menu_abbr":"map[Type]Type"},"br":{"word":"br","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"break${0}","description":"break${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":20,"menu_template":"break","real_name":"br","action__pattern":"^snippet\\s\\+br$","menu_abbr":"break"},"terf":{"word":"terf","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err != nil {\nt.Fatalf(\"${1}\")\n}","description":"if err != nil {\nt.Fatalf(\"${1}\")\n}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":331,"menu_template":"if err != nil { t.Fatalf(...) }","real_name":"terf","action__pattern":"^snippet\\s\\+terf$","menu_abbr":"if err != nil { t.Fatalf(...) }"},"con":{"word":"con","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"const ${1:NAME} ${2:Type} = ${0:0}","description":"const ${1:NAME} ${2:Type} = ${0:0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":33,"menu_template":"const XXX Type = ...","real_name":"con","action__pattern":"^snippet\\s\\+con$","menu_abbr":"const XXX Type = ..."},"return":{"word":"return","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"return ${0}","description":"return ${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":270,"menu_template":"return ...","real_name":"return","action__pattern":"^snippet\\s\\+return$","menu_abbr":"return ..."},"errn,":{"word":"errn,","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err != nil {\n\t\treturn ${1:nil}, err\n\t}\n\t${0}","description":"if err != nil {\n\t\treturn ${1:nil}, err\n\t}\n\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":151,"menu_template":"if err != nil { return [...], err }","real_name":"errn,","action__pattern":"^snippet\\s\\+errn,$","menu_abbr":"if err != nil { return [...], err }"},"ok":{"word":"ok","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if !ok {\n\t\t${0}\n\t}","description":"if !ok {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":253,"menu_template":"if !ok { ... }","real_name":"ok","action__pattern":"^snippet\\s\\+ok$","menu_abbr":"if !ok { ... }"},":":{"word":":","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"${1} := ${0}","description":"${1} := ${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":2,"menu_template":"v := value","real_name":":","action__pattern":"^snippet\\s\\+:$","menu_abbr":"v := value"},"else":{"word":"else","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"else {\n\t\t${0}\n\t}","description":"else {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":117,"menu_template":"else {  ${0}  }","real_name":"else","action__pattern":"^snippet\\s\\+else$","menu_abbr":"else {  ${0}  }"},"interface":{"word":"interface","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"type ${1:Interface} interface {\n\t\t${2:/* TODO: add methods */}\n\t}","description":"type ${1:Interface} interface {\n\t\t${2:/* TODO: add methods */}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":104,"menu_template":"interface I { ... }","real_name":"interface","action__pattern":"^snippet\\s\\+interface$","menu_abbr":"interface I { ... }"},"eq":{"word":"eq","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if !reflect.DeepEqual(${1:expected}, ${2:actual}) {\n\t_, file, line, _ := runtime.Caller(0)\n\tfmt.Printf(\"%s:%d:\\n\\n\\texp: %#v\\n\\n\\tgot: %#v\\n\\n\", filepath.Base(file), line, $1, $2)\n\tt.FailNow()\n}","description":"if !reflect.DeepEqual(${1:expected}, ${2:actual}) {\n\t_, file, line, _ := runtime.Caller(0)\n\tfmt.Printf(\"%s:%d:\\n\\n\\texp: %#v\\n\\n\\tgot: %#v\\n\\n\", filepath.Base(file), line, $1, $2)\n\tt.FailNow()\n}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":360,"menu_template":"equals: test two identifiers with DeepEqual","real_name":"eq","action__pattern":"^snippet\\s\\+eq$","menu_abbr":"equals: test two identifiers with DeepEqual"},"rt":{"word":"rt","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"return ${0}","description":"return ${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":270,"menu_template":"return ...","real_name":"return","action__pattern":"^snippet\\s\\+return$","menu_abbr":"return ..."},"import":{"word":"import","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"import (\n\t\t\"${1:package}\"\n\t)","description":"import (\n\t\t\"${1:package}\"\n\t)","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":98,"menu_template":"import ( ... )","real_name":"import","action__pattern":"^snippet\\s\\+import$","menu_abbr":"import ( ... )"},"ch":{"word":"ch","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"chan ${0:int}","description":"chan ${0:int}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":24,"menu_template":"chan Type","real_name":"ch","action__pattern":"^snippet\\s\\+ch$","menu_abbr":"chan Type"},"cn":{"word":"cn","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"continue${0}","description":"continue${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":51,"menu_template":"continue","real_name":"cn","action__pattern":"^snippet\\s\\+cn$","menu_abbr":"continue"},"gof":{"word":"gof","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"go func(${1}) {\n\t\t${3:/* TODO */}\n\t}(${2})","description":"go func(${1}) {\n\t\t${3:/* TODO */}\n\t}(${2})","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":303,"menu_template":"go func(...) { ... }(...)","real_name":"gof","action__pattern":"^snippet\\s\\+gof$","menu_abbr":"go func(...) { ... }(...)"},"func":{"word":"func","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"func ${1:function}(${2}) ${3:error }{\n\t\t${0}\n\t}","description":"func ${1:function}(${2}) ${3:error }{\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":208,"menu_template":"func function(...) [error] { ... }","real_name":"func","action__pattern":"^snippet\\s\\+func$","menu_abbr":"func function(...) [error] { ... }"},"default":{"word":"default","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"default:\n\t\t${0}","description":"default:\n\t\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":55,"menu_template":"default: ...","real_name":"default","action__pattern":"^snippet\\s\\+default$","menu_abbr":"default: ..."},"test":{"word":"test","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"func Test${1:Function}(t *testing.T) {\n\t\t${0}\n\t}","description":"func Test${1:Function}(t *testing.T) {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":309,"menu_template":"func TestXYZ(t *testing.T) { ... }","real_name":"test","action__pattern":"^snippet\\s\\+test$","menu_abbr":"func TestXYZ(t *testing.T) { ... }"},"hf":{"word":"hf","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"func ${1:handler}(w http.ResponseWriter, r *http.Request) {\n${0:fmt.Fprintf(w, \"hello world\")}\n}","description":"func ${1:handler}(w http.ResponseWriter, r *http.Request) {\n${0:fmt.Fprintf(w, \"hello world\")}\n}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":368,"menu_template":"http.HandlerFunc","real_name":"hf","action__pattern":"^snippet\\s\\+hf$","menu_abbr":"http.HandlerFunc"},"hhf":{"word":"hhf","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"${1:http}.HandleFunc(\"${2:/}\", func(w http.ResponseWriter, r *http.Request) {\n${0:fmt.Fprintf(w, \"hello world\")}\n})","description":"${1:http}.HandleFunc(\"${2:/}\", func(w http.ResponseWriter, r *http.Request) {\n${0:fmt.Fprintf(w, \"hello world\")}\n})","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":374,"menu_template":"mux.HandleFunc(...)","real_name":"hhf","action__pattern":"^snippet\\s\\+hhf$","menu_abbr":"mux.HandleFunc(...)"},"pn":{"word":"pn","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"panic(\"${0}\")","description":"panic(\"${0}\")","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":265,"menu_template":"panic(\"...\")","real_name":"panic","action__pattern":"^snippet\\s\\+panic$","menu_abbr":"panic(\"...\")"},"ter":{"word":"ter","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err != nil {\nt.Errorf(\"${1}\")\n}","description":"if err != nil {\nt.Errorf(\"${1}\")\n}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":325,"menu_template":"if err != nil { t.Errorf(...) }","real_name":"ter","action__pattern":"^snippet\\s\\+ter$","menu_abbr":"if err != nil { t.Errorf(...) }"},"defr":{"word":"defr","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"defer func() {\n\t\tif err := recover(); err != nil {\n\t\t\t${0}\n\t\t}\n\t}()","description":"defer func() {\n\t\tif err := recover(); err != nil {\n\t\t\t${0}\n\t\t}\n\t}()","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":71,"menu_template":"defer func() {  if err := recover(); err != nil {  ${0}  }  }()","real_name":"defr","action__pattern":"^snippet\\s\\+defr$","menu_abbr":"defer func() {  if err := recover(); err != nil {  ${0}  }  }()"},"meth":{"word":"meth","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"func (${1:self} ${2:Type}) ${3:Do}(${4}) ${5:error }{\n\t\t${0}\n\t}","description":"func (${1:self} ${2:Type}) ${3:Do}(${4}) ${5:error }{\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":246,"menu_template":"func (self Type) Method(...) [error] { ... }","regexp":null,"real_name":"meth","action__pattern":"^snippet\\s\\+meth$","menu_abbr":"func (self Type) Method(...) [error] { ... }"},"ff":{"word":"ff","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"fmt.Printf(\"${1} = %+v\\n\", $1)\n\t${0}","description":"fmt.Printf(\"${1} = %+v\\n\", $1)\n\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":214,"menu_template":"fmt.Printf(...)","real_name":"ff","action__pattern":"^snippet\\s\\+ff$","menu_abbr":"fmt.Printf(...)"},"ap=":{"word":"ap=","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"${1:slice} = append($1, ${0:value})","description":"${1:slice} = append($1, ${0:value})","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":16,"menu_template":"slice = append(slice, value)","real_name":"ap=","action__pattern":"^snippet\\s\\+ap=$","menu_abbr":"slice = append(slice, value)"},"cons":{"word":"cons","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"const (\n\t\t${1:NAME} ${2:Type} = ${3:value}\n\t\t${0}\n\t)","description":"const (\n\t\t${1:NAME} ${2:Type} = ${3:value}\n\t\t${0}\n\t)","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":37,"menu_template":"const ( ... )","real_name":"cons","action__pattern":"^snippet\\s\\+cons$","menu_abbr":"const ( ... )"},"fn":{"word":"fn","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"fmt.Println(\"${1}\")${0}","description":"fmt.Println(\"${1}\")${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":219,"menu_template":"fmt.Println(...)","real_name":"fn","action__pattern":"^snippet\\s\\+fn$","menu_abbr":"fmt.Println(...)"},"make":{"word":"make","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"make(${1:[]string}, ${2:0})${0}","description":"make(${1:[]string}, ${2:0})${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":231,"menu_template":"make(Type, size)","real_name":"make","action__pattern":"^snippet\\s\\+make$","menu_abbr":"make(Type, size)"},"ft":{"word":"ft","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"fallthrough${0}","description":"fallthrough${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":186,"menu_template":"fallthrough","real_name":"ft","action__pattern":"^snippet\\s\\+ft$","menu_abbr":"fallthrough"},"for":{"word":"for","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"for ${1} {\n\t\t${0}\n\t}","description":"for ${1} {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":190,"menu_template":"for ... { ... }","real_name":"for","action__pattern":"^snippet\\s\\+for$","menu_abbr":"for ... { ... }"},"case":{"word":"case","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"case ${1:value}:\n\t\t${0}","description":"case ${1:value}:\n\t\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":28,"menu_template":"case ...:","real_name":"case","action__pattern":"^snippet\\s\\+case$","menu_abbr":"case ...:"},"ap":{"word":"ap","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"append(${1:slice}, ${0:value})","description":"append(${1:slice}, ${0:value})","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":12,"menu_template":"append(slice, value)","real_name":"ap","action__pattern":"^snippet\\s\\+ap$","menu_abbr":"append(slice, value)"},"json":{"word":"json","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"\\`json:\"${1:keyName}\"\\`${0}","description":"\\`json:\"${1:keyName}\"\\`${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":176,"menu_template":"\\`json:key\\`","real_name":"json","action__pattern":"^snippet\\s\\+json$","menu_abbr":"\\`json:key\\`"},"var":{"word":"var","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"var ${1:x} ${2:Type}${3: = ${0:value\\}}","description":"var ${1:x} ${2:Type}${3: = ${0:value\\}}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":350,"menu_template":"var x Type [= ...]","real_name":"var","action__pattern":"^snippet\\s\\+var$","menu_abbr":"var x Type [= ...]"},"example":{"word":"example","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"func Example${1:Method}() {\n\t\t${0}\n\t\t// Output:\n\t}","description":"func Example${1:Method}() {\n\t\t${0}\n\t\t// Output:\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":337,"menu_template":"func Example${1:Method}() {  ${0}  // Output:  }","real_name":"example","action__pattern":"^snippet\\s\\+example$","menu_abbr":"func Example${1:Method}() {  ${0}  // Output:  }"},"iota":{"word":"iota","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"const (\n\t\t${1:NAME} ${2:Type} = iota\n\t\t${0}\n\t)","description":"const (\n\t\t${1:NAME} ${2:Type} = iota\n\t\t${0}\n\t)","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":44,"menu_template":"const ( ... = iota )","real_name":"iota","action__pattern":"^snippet\\s\\+iota$","menu_abbr":"const ( ... = iota )"},"sp":{"word":"sp","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"fmt.Sprintf(\"%${1:s}\", ${2:var})${0}","description":"fmt.Sprintf(\"%${1:s}\", ${2:var})${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":295,"menu_template":"fmt.Sprintf(...)","real_name":"sp","action__pattern":"^snippet\\s\\+sp$","menu_abbr":"fmt.Sprintf(...)"},"if":{"word":"if","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if ${1:condition} {\n\t\t${0}\n\t}","description":"if ${1:condition} {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":110,"menu_template":"else { ... }","real_name":"if","action__pattern":"^snippet\\s\\+if$","menu_abbr":"else { ... }"},"ife":{"word":"ife","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err := ${1:condition}; err != nil {\n\t\t${0}\n\t}","description":"if err := ${1:condition}; err != nil {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":123,"menu_template":"if err := ...; err != nil { ... }","real_name":"ife","action__pattern":"^snippet\\s\\+ife$","menu_abbr":"if err := ...; err != nil { ... }"},"df":{"word":"df","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"defer ${1:func}(${2})\n\t${0}","description":"defer ${1:func}(${2})\n\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":61,"menu_template":"defer someFunction()","real_name":"df","action__pattern":"^snippet\\s\\+df$","menu_abbr":"defer someFunction()"},"yaml":{"word":"yaml","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"\\`yaml:\"${1:keyName}\"\\`${0}","description":"\\`yaml:\"${1:keyName}\"\\`${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":181,"menu_template":"\\`yaml:key\\`","real_name":"yaml","action__pattern":"^snippet\\s\\+yaml$","menu_abbr":"\\`yaml:key\\`"},"benchmark":{"word":"benchmark","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"func Benchmark${1:Method}(b *testing.B) {\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t${0}\n\t\t}\n\t}","description":"func Benchmark${1:Method}(b *testing.B) {\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t${0}\n\t\t}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":343,"menu_template":"func Benchmark${1:Method}(b *testing.B) {  for i := 0; i < b.N; i++ {  ${0}  }  }","real_name":"benchmark","action__pattern":"^snippet\\s\\+benchmark$","menu_abbr":"func Benchmark${1:Method}(b *testing.B) {  for i := 0; i < b.N; i++ {  ${0}  }  }"},"select":{"word":"select","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"select {\n\tcase ${1:v1} := <-${2:chan1}\n\t\t${0}\n\t}","description":"select {\n\tcase ${1:v1} := <-${2:chan1}\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":275,"menu_template":"select { case a := <-chan: ... }","real_name":"select","action__pattern":"^snippet\\s\\+select$","menu_abbr":"select { case a := <-chan: ... }"},"errn":{"word":"errn","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err != nil {\n\t\treturn err\n\t}\n\t${0}","description":"if err != nil {\n\t\treturn err\n\t}\n\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":130,"menu_template":"if err != nil { return err }","real_name":"errn","action__pattern":"^snippet\\s\\+errn$","menu_abbr":"if err != nil { return err }"},"switch":{"word":"switch","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"switch ${1:var} {\n\tcase ${2:value1}:\n\t\t${0}\n\t}","description":"switch ${1:var} {\n\tcase ${2:value1}:\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":288,"menu_template":"switch x { ... }","real_name":"switch","action__pattern":"^snippet\\s\\+switch$","menu_abbr":"switch x { ... }"},"gpl":{"word":"gpl","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"/*\n\t * This program is free software; you can redistribute it and/or modify\n\t * it under the terms of the GNU General Public License as published by\n\t * the Free Software Foundation; either version 2 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * This program is distributed in the hope that it will be useful,\n\t * but WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t * GNU General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU General Public License\n\t * along with this program; if not, see <http://www.gnu.org/licenses/>.\n\t *\n\t * Copyright (C) ${1:Author}, `strftime(\"%Y\")`\n\t */\n\n\t${0}","description":"/*\n\t * This program is free software; you can redistribute it and/or modify\n\t * it under the terms of the GNU General Public License as published by\n\t * the Free Software Foundation; either version 2 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * This program is distributed in the hope that it will be useful,\n\t * but WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t * GNU General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU General Public License\n\t * along with this program; if not, see <http://www.gnu.org/licenses/>.\n\t *\n\t * Copyright (C) ${1:Author}, `strftime(\"%Y\")`\n\t */\n\n\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":78,"menu_template":"/*  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, see <http://www.gnu.org/licenses/>.  *  * Copyright (C) ${1:Author}, `strftime(\"%Y\")`  */   ${0}","real_name":"gpl","action__pattern":"^snippet\\s\\+gpl$","menu_abbr":"/*  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, see <http://www.gnu.org/licenses/>.  *  * Copyright (C) ${1:Author}, `strftime(\"%Y\")`  */   ${0}"},"main":{"word":"main","options":{"word":0,"oneshot":0,"indent":0,"head":1},"snip":"func main() {\n\t\t${0}\n\t}","description":"func main() {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":239,"menu_template":"func main() { ... }","real_name":"main","action__pattern":"^snippet\\s\\+main$","menu_abbr":"func main() { ... }"},"st":{"word":"st","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"type ${1:Type} struct {\n\t\t${0}\n\t}","description":"type ${1:Type} struct {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":282,"menu_template":"type T struct { ... }","real_name":"st","action__pattern":"^snippet\\s\\+st$","menu_abbr":"type T struct { ... }"},"anon":{"word":"anon","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"${1:fn} := func() {\n\t\t${0}\n\t}","description":"${1:fn} := func() {\n\t\t${0}\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":6,"menu_template":"fn := func() { ... }","real_name":"anon","action__pattern":"^snippet\\s\\+anon$","menu_abbr":"fn := func() { ... }"},"errh":{"word":"errh","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err != nil {\n\t\t${1}\n\t\treturn\n\t}\n\t${0}","description":"if err != nil {\n\t\t${1}\n\t\treturn\n\t}\n\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":159,"menu_template":"if err != nil { ... return }","real_name":"errh","action__pattern":"^snippet\\s\\+errh$","menu_abbr":"if err != nil { ... return }"},"package":{"word":"package","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"// Package $1 provides ${2:...}\n\tpackage ${1:main}\n\t${0}","description":"// Package $1 provides ${2:...}\n\tpackage ${1:main}\n\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":259,"menu_template":"package ...","real_name":"package","action__pattern":"^snippet\\s\\+package$","menu_abbr":"package ..."},"errl":{"word":"errl","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err != nil {\n\t\tlog.Fatal(err)\n\t}","description":"if err != nil {\n\t\tlog.Fatal(err)\n\t}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":144,"menu_template":"if err != nil { log.Fatal(err) }","real_name":"errl","action__pattern":"^snippet\\s\\+errl$","menu_abbr":"if err != nil { log.Fatal(err) }"},"panic":{"word":"panic","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"panic(\"${0}\")","description":"panic(\"${0}\")","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":265,"menu_template":"panic(\"...\")","real_name":"panic","action__pattern":"^snippet\\s\\+panic$","menu_abbr":"panic(\"...\")"},"errp":{"word":"errp","options":{"word":0,"oneshot":0,"indent":0,"head":0},"snip":"if err != nil {\n\t\tpanic(${1})\n\t}\n\t${0}","description":"if err != nil {\n\t\tpanic(${1})\n\t}\n\t${0}","action__path":"C:\\app\\vim80\\user\\dein\\.cache\\vimrc\\.dein\\gosnippets\\snippets\\go.snip","action__line":168,"menu_template":"if err != nil { panic(...) }","real_name":"errp","action__pattern":"^snippet\\s\\+errp$","menu_abbr":"if err != nil { panic(...) }"}}
